diff --git a/media/java/android/media/AudioSystem.java b/media/java/android/media/AudioSystem.java
index e08c290..434c1ae 100644
--- a/media/java/android/media/AudioSystem.java
+++ b/media/java/android/media/AudioSystem.java
@@ -61,6 +61,8 @@ public class AudioSystem
     public static final int STREAM_DTMF = 8;
     /* @hide The audio stream for text to speech (TTS) */
     public static final int STREAM_TTS = 9;
+    /* @hide The audio stream for FM */
+    public static final int STREAM_FM = 10;
     /**
      * @deprecated Use {@link #numStreamTypes() instead}
      */
@@ -80,7 +82,8 @@ public class AudioSystem
         "STREAM_BLUETOOTH_SCO",
         "STREAM_SYSTEM_ENFORCED",
         "STREAM_DTMF",
-        "STREAM_TTS"
+        "STREAM_TTS",
+        "STREAM_FM"
     };
 
     /*
@@ -369,6 +372,8 @@ public class AudioSystem
     public static final int DEVICE_OUT_HDMI_ARC = 0x40000;
     public static final int DEVICE_OUT_SPDIF = 0x80000;
     public static final int DEVICE_OUT_FM = 0x100000;
+    public static final int DEVICE_OUT_FM_HEADSET = 0x10000000;
+    public static final int DEVICE_OUT_FM_SPEAKER = 0x20000000;
     public static final int DEVICE_OUT_AUX_LINE = 0x200000;
     public static final int DEVICE_OUT_SPEAKER_SAFE = 0x400000;
     public static final int DEVICE_OUT_IP = 0x800000;
@@ -398,6 +403,8 @@ public class AudioSystem
                                               DEVICE_OUT_HDMI_ARC |
                                               DEVICE_OUT_SPDIF |
                                               DEVICE_OUT_FM |
+                                              DEVICE_OUT_FM_HEADSET |
+                                              DEVICE_OUT_FM_SPEAKER |
                                               DEVICE_OUT_AUX_LINE |
                                               DEVICE_OUT_SPEAKER_SAFE |
                                               DEVICE_OUT_IP |
@@ -415,6 +422,8 @@ public class AudioSystem
     public static final int DEVICE_OUT_ALL_HDMI_SYSTEM_AUDIO = (DEVICE_OUT_AUX_LINE |
                                                                 DEVICE_OUT_HDMI_ARC |
                                                                 DEVICE_OUT_SPDIF);
+    public static final int DEVICE_OUT_ALL_FM = (DEVICE_OUT_FM_HEADSET |
+                                                  DEVICE_OUT_FM_SPEAKER);
     public static final int DEVICE_ALL_HDMI_SYSTEM_AUDIO_AND_SPEAKER =
             (DEVICE_OUT_ALL_HDMI_SYSTEM_AUDIO |
              DEVICE_OUT_SPEAKER);
@@ -500,6 +509,8 @@ public class AudioSystem
     public static final String DEVICE_OUT_HDMI_ARC_NAME = "hmdi_arc";
     public static final String DEVICE_OUT_SPDIF_NAME = "spdif";
     public static final String DEVICE_OUT_FM_NAME = "fm_transmitter";
+    public static final String DEVICE_OUT_FM_HEADSET_NAME = "fm_headset";
+    public static final String DEVICE_OUT_FM_SPEAKER_NAME = "fm_speaker";
     public static final String DEVICE_OUT_AUX_LINE_NAME = "aux_line";
     public static final String DEVICE_OUT_SPEAKER_SAFE_NAME = "speaker_safe";
     public static final String DEVICE_OUT_IP_NAME = "ip";
@@ -573,6 +584,10 @@ public class AudioSystem
             return DEVICE_OUT_SPDIF_NAME;
         case DEVICE_OUT_FM:
             return DEVICE_OUT_FM_NAME;
+        case DEVICE_OUT_FM_HEADSET:
+            return DEVICE_OUT_FM_HEADSET_NAME;
+        case DEVICE_OUT_FM_SPEAKER:
+            return DEVICE_OUT_FM_SPEAKER_NAME;
         case DEVICE_OUT_AUX_LINE:
             return DEVICE_OUT_AUX_LINE_NAME;
         case DEVICE_OUT_SPEAKER_SAFE:
diff --git a/services/core/jni/com_android_server_location_GnssLocationProvider.cpp b/services/core/jni/com_android_server_location_GnssLocationProvider.cpp
index c6cd714..891a3ae 100644
--- a/services/core/jni/com_android_server_location_GnssLocationProvider.cpp
+++ b/services/core/jni/com_android_server_location_GnssLocationProvider.cpp
@@ -166,7 +166,7 @@ static void sv_status_callback(GpsSvStatus* sv_status)
         } else if (info.svid >= QZSS_SVID_MIN && info.svid <= QZSS_SVID_MAX) {
             info.constellation = GNSS_CONSTELLATION_QZSS;
         } else {
-            ALOGD("Unknown constellation type with Svid = %d.", info.svid);
+            ALOGD("sv_status_callback: Unknown constellation type with Svid = %d.", info.svid);
             info.constellation = GNSS_CONSTELLATION_UNKNOWN;
         }
         info.c_n0_dbhz = sv_status->sv_list[i].snr;
@@ -1233,7 +1233,7 @@ static jobject translate_gps_measurement(JNIEnv* env,
     if (measurement->prn >= 1 && measurement->prn <= 32) {
         SET(ConstellationType, static_cast<int32_t>(GNSS_CONSTELLATION_GPS));
     } else {
-        ALOGD("Unknown constellation type with Svid = %d.", measurement->prn);
+        ALOGD("gps_measurement: Unknown constellation type with Svid = %d.", measurement->prn);
         SET(ConstellationType,
             static_cast<int32_t>(GNSS_CONSTELLATION_UNKNOWN));
     }
@@ -1493,7 +1493,7 @@ static jobject translate_gps_navigation_message(JNIEnv* env, GpsNavigationMessag
         // correctly. Set the higher byte to 'GPS'.
         SET(Type, static_cast<int32_t>(message->type | 0x0100));
     } else {
-        ALOGD("Unknown constellation type with Svid = %d.", message->prn);
+        ALOGD("gps_navigation_message: Unknown constellation type with Svid = %d.", message->prn);
         SET(ConstellationType,
             static_cast<int32_t>(GNSS_CONSTELLATION_UNKNOWN));
         SET(Type, static_cast<int32_t>(GNSS_NAVIGATION_MESSAGE_TYPE_UNKNOWN));
